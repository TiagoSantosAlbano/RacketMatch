const jwt = require('jsonwebtoken');
const User = require('../models/User');
require('dotenv').config();

/**
 * Middleware para autentica√ß√£o via JWT.
 * Espera header: Authorization: Bearer <token>
 */
const authenticateToken = async (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Exige "Bearer <token>"

  if (!token) {
    console.warn('üö´ Token n√£o fornecido na requisi√ß√£o.');
    return res.status(401).json({ message: 'Token n√£o fornecido.' });
  }

  try {
    // Valida e decodifica o token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // decoded.id √© obrigat√≥rio! Verifica como est√° o sign no teu login.
    if (!decoded.id) {
      console.warn('‚ùå Token decodificado mas sem id de usu√°rio.');
      return res.status(401).json({ message: 'Token inv√°lido (sem id de usu√°rio).' });
    }

    // Procura o usu√°rio
    const user = await User.findById(decoded.id);
    if (!user) {
      console.warn('‚ùå Token v√°lido, mas usu√°rio n√£o encontrado.');
      return res.status(401).json({ message: 'Usu√°rio n√£o encontrado.' });
    }

    // Atualiza √∫ltima atividade do usu√°rio (opcional, mas √∫til)
    user.lastSeen = new Date();
    await user.save();

    // Injeta user no req para usar nos controladores
    req.user = user;
    next();
  } catch (error) {
    console.error('‚ùå Erro ao verificar o token:', error.message);
    return res.status(403).json({ message: 'Token inv√°lido ou expirado.' });
  }
};

module.exports = authenticateToken;
